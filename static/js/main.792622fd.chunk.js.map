{"version":3,"sources":["App.js","Hit.mov","Miss.wav","serviceWorker.js","index.js"],"names":["App","global","clickStatusCell","Array","fill","count","correctClick","number","randomNumber","i","Math","floor","random","state","gameStatus","boardDisplay","cellBackground","setTimeout","setState","event","this","document","getElementsByClassName","play","newBackground","slice","window","location","reload","className","id","src","Hit","Miss","onClick","handleClick","type","value","refreshPage","React","Component","module","exports","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.792622fd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Hit from './Hit.mov';\nimport Miss from './Miss.wav';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    global.clickStatusCell = Array(16).fill(false);\n    global.count = 0;\n    global.correctClick = 0;\n    let boardSize = 16;\n    let number = [];\n    global.randomNumber = [];\n    for (var i = 0; i < boardSize; i++) {\n      number[i] = Math.floor(Math.random() * 2);\n      if (number[i] === 1) {\n        global.randomNumber[i] = 'hit';\n        global.count++;\n      } else {\n        global.randomNumber[i] = 'miss';\n      }\n    }\n    this.state = {\n      gameStatus: 'gameInProgress',\n      boardDisplay: 'board',\n      cellBackground: global.randomNumber\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        cellBackground: Array(16).fill('tile')\n      });\n    }, 5000);\n    setTimeout(() => {\n      this.setState({ gameStatus: 'gameOver', boardDisplay: 'boardNone' });\n    }, 12000);\n  }\n\n  handleClick(event) {\n    var i = event;\n    if (\n      global.randomNumber[i] === 'hit' &&\n      global.clickStatusCell[i] === false &&\n      this.state.cellBackground[i] !== global.randomNumber[i]\n    ) {\n      global.correctClick++;\n      global.clickStatusCell[i] = true;\n      let audioEl = document.getElementsByClassName('audio-element')[0];\n      audioEl.play();\n      if (global.correctClick !== 0 && global.count === global.correctClick) {\n        this.setState({ gameStatus: 'gameOver', boardDisplay: 'boardNone' });\n      }\n    } else {\n      let audioEl = document.getElementsByClassName('audio-element2')[0];\n      audioEl.play();\n    }\n\n    const newBackground = this.state.cellBackground.slice();\n    newBackground[i] = global.randomNumber[i];\n    this.setState({\n      cellBackground: newBackground\n    });\n  }\n\n  refreshPage() {\n    window.location.reload(false);\n  }\n\n  render() {\n    return (\n      <div className='game'>\n        <div id='messageArea'></div>\n\n        <audio className='audio-element'>\n          <source src={Hit}></source>\n        </audio>\n\n        <audio className='audio-element2'>\n          <source src={Miss}></source>\n        </audio>\n\n        <div className={this.state.boardDisplay}>\n          <div className='board-row1'>\n            <button\n              className={this.state.cellBackground[0]}\n              onClick={() => this.handleClick(0)}></button>\n            <button\n              className={this.state.cellBackground[1]}\n              onClick={() => this.handleClick(1)}></button>\n            <button\n              className={this.state.cellBackground[2]}\n              onClick={() => this.handleClick(2)}></button>\n            <button\n              className={this.state.cellBackground[3]}\n              onClick={() => this.handleClick(3)}></button>\n          </div>\n          <div className='board-row2'>\n            <button\n              className={this.state.cellBackground[4]}\n              onClick={() => this.handleClick(4)}></button>\n            <button\n              className={this.state.cellBackground[5]}\n              onClick={() => this.handleClick(5)}></button>\n            <button\n              className={this.state.cellBackground[6]}\n              onClick={() => this.handleClick(6)}></button>\n            <button\n              className={this.state.cellBackground[7]}\n              onClick={() => this.handleClick(7)}></button>\n          </div>\n          <div className='board-row3'>\n            <button\n              className={this.state.cellBackground[8]}\n              onClick={() => this.handleClick(8)}></button>\n            <button\n              className={this.state.cellBackground[9]}\n              onClick={() => this.handleClick(9)}></button>\n            <button\n              className={this.state.cellBackground[10]}\n              onClick={() => this.handleClick(10)}></button>\n            <button\n              className={this.state.cellBackground[11]}\n              onClick={() => this.handleClick(11)}></button>\n          </div>\n          <div className='board-row4'>\n            <button\n              className={this.state.cellBackground[12]}\n              onClick={() => this.handleClick(12)}></button>\n            <button\n              className={this.state.cellBackground[13]}\n              onClick={() => this.handleClick(13)}></button>\n            <button\n              className={this.state.cellBackground[14]}\n              onClick={() => this.handleClick(14)}></button>\n            <button\n              className={this.state.cellBackground[15]}\n              onClick={() => this.handleClick(15)}></button>\n          </div>\n        </div>\n\n        <div className={this.state.gameStatus}>\n          <h1>Game Over!</h1>\n          <h2>\n            Your Score: {global.correctClick} out of {global.count}\n          </h2>\n          <input\n            type='button'\n            value='Replay'\n            onClick={() => this.refreshPage()}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/Hit.5bd95270.mov\";","module.exports = __webpack_public_path__ + \"static/media/Miss.6d63fdd3.wav\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}